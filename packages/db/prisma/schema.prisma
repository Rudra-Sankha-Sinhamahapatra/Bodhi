generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id                String   @id @default(cuid())
  sessionToken      String   @unique
  userId            String
  expires           DateTime
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String?   @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  promptHistory     Prompt[]  
  responseHistory   Response[]
  tokenCount        TokenCount[]
}

model VerificationToken {
  identifier        String
  token             String   @unique
  expires           DateTime

  @@unique([identifier, token])
}

model Prompt {
  id                Int            @id @default(autoincrement())
  user              User           @relation(fields: [userId], references: [id])
  userId            String     
  textContent       String
  timestamp         DateTime       @default(now())
} 

model Response {
  id                Int            @id @default(autoincrement())
  user              User           @relation(fields: [userId], references: [id])
  userId            String     
  textContent       String
  timestamp         DateTime       @default(now())
}

model TokenCount {
  id                Int            @id @default(autoincrement())
  user              User           @relation(fields: [userId], references: [id])
  userId            String     
  inputToken        Int
  outputToken       Int
  timestamp         DateTime       @default(now())
}